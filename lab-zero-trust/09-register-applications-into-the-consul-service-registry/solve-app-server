#!/bin/bash
#
# This script runs when the platform solve the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

#Let's start by registering the dataview service with the Consul server.

export DOMAIN="opengov.co"
export NODENAME="app-server"
export DATACENTER="dc1"
export CONSUL_CONFIG_DIR="/etc/consul.d"
export CONSUL_CERT_DIR="${CONSUL_CONFIG_DIR}/certs"

#Before we define the service, run the following commands: 

consul members
consul catalog services
set-workdir ${CONSUL_CONFIG_DIR} 

#* Let's define the dataview service.

cat << EOF > ${CONSUL_CONFIG_DIR}/dataview.hcl
service {
  name = "dataview"
  id = "dataview"
  port = 8888
  connect {
    sidecar_service {
      proxy {
        upstreams = [
          {
            destination_name = "postgres-db"
            local_bind_port  = 5432
          }
        ]
      }
    }
  }
  check {
    name     = "dataview"
    tcp      = "app-server:8888"
    interval = "10s"
    timeout  = "1s"
  }
}
EOF

#* Change permissions to the consul user.

chown -Rf consul:consul dataview.hcl

#Reload the consul service.
consul reload

#Now run that consul members and consul catalog services commands again.
consul members
consul catalog services

#* Let's look at the Consul UI and see the differences.  Click ok the `Services tab.`
#Change permissions on the dataview file.
#You should see that the consul service catalog has two new services.  The problem is that it looks like the service is unhealthy.  That's because the postgres-db upstream service doesn't exist yet.  Let's fix that.

cat << EOF > ${CONSUL_CONFIG_DIR}/postgres-db.hcl
service {
  name = "postgres-db"
  id = "postgres-db"
  port = 5432
  connect {
    sidecar_service {}
  }
  check {
    name     = "postgres-db"
    tcp      = "app-server:5432"
    interval = "10s"
    timeout  = "1s"
  }
}
EOF

#* Change permissions to the postgres service file.
chown -Rf consul:consul ${CONSUL_CONFIG_DIR}/postgres-db.hcl

#* Run the consul validate script to ensure that all the consul configuration files are valid.
consul validate .

#* Reload Consul:

consul reload

#* Run the Consul catalog services commands.
#Now you should see the new postgres applications.
consul catalog services

#* Now, let's check the status of the Consul agent in the `Consul UI` tab.
#You should see that the dataview and postgres-db services are still not healthy.

#We need to start the consul envoy sidecars:

systemctl start consul-dataview-sidecar
systemctl start consul-postgres-sidecar

#* Check the `Consul UI` tab one more time. You should now see 3 healthy services.